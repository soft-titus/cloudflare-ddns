name: Build and Publish Production Docker Image

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Git
        run: |
          git fetch --tags --force

      - name: Get highest Git tag
        id: git_tag
        run: |
          TAG=$(git tag -l --sort=-version:refname | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1)
          if [ -z "$TAG" ]; then
            echo "No tags found, defaulting to version 1.0.0"
            echo "tag=1.0.0" >> $GITHUB_ENV
            echo "tag_exists=false" >> $GITHUB_ENV
          else
            echo "Highest Git tag is $TAG"
            echo "tag=$TAG" >> $GITHUB_ENV
            echo "tag_exists=true" >> $GITHUB_ENV
          fi

      - name: Determine next version
        id: version
        run: |
          VERSION=${{ env.tag }}
          TAG_EXISTS=${{ env.tag_exists }}

          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          PATCH=$(echo $VERSION | cut -d. -f3)

          if [ "$TAG_EXISTS" = "false" ]; then
            git log --oneline --pretty=format:"%s" HEAD > $GITHUB_WORKSPACE/commits.txt
          else
            git log --oneline --pretty=format:"%s" $VERSION..HEAD > $GITHUB_WORKSPACE/commits.txt
          fi

          if grep -q "BREAKING CHANGE: " $GITHUB_WORKSPACE/commits.txt; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif grep -q "feat: " $GITHUB_WORKSPACE/commits.txt; then
            MINOR=$((MINOR + 1))
            PATCH=0
          elif grep -q "fix: " $GITHUB_WORKSPACE/commits.txt; then
            PATCH=$((PATCH + 1))
          else
            echo "No relevant commits found, skipping build."
            echo "skip_build=true" >> $GITHUB_ENV
            exit 0
          fi

          if [ "$TAG_EXISTS" = "false" ]; then
            NEXT_VERSION="$VERSION"
          else
            NEXT_VERSION="$MAJOR.$MINOR.$PATCH"
          fi
          echo "next_version=$NEXT_VERSION" >> $GITHUB_ENV

      - name: Log in to GitHub Container Registry
        if: env.skip_build != 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Git identity
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"

      - name: Build and push Docker image
        if: env.skip_build != 'true'
        run: |
          docker build -t ghcr.io/${{ github.repository }}:${{ env.next_version }} .
          docker push ghcr.io/${{ github.repository }}:${{ env.next_version }}

      - name: Update CHANGELOG.md
        if: env.skip_build != 'true'
        run: |
          if [ ! -f CHANGELOG.md ]; then
            echo "# Changelog" > CHANGELOG.md
          fi
          echo -e "\n\n## ${{ env.next_version }} - $(date +'%Y-%m-%d')" >> CHANGELOG.md
          grep -v "docs: Update CHANGELOG.md" $GITHUB_WORKSPACE/commits.txt | sed 's/^/- /' >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          git add CHANGELOG.md
          git commit -m "docs: Update CHANGELOG.md for ${{ env.next_version }}"
          git push origin main

      - name: Create and push Git tag
        if: env.skip_build != 'true'
        run: |
          git tag ${{ env.next_version }}
          git push origin ${{ env.next_version }}

      - name: Retain only the last 3 builds
        if: env.skip_build != 'true'
        run: |
          REPO_NAME=${GITHUB_REPOSITORY#*/}
          VERSIONS=$(curl -Ls -H "Accept: application/vnd.github+json" \
                           -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                           -H "X-GitHub-Api-Version: 2022-11-28" \
                           https://api.github.com/user/packages/container/$REPO_NAME/versions)
          VERSION_IDS=$(echo "$VERSIONS" | \
                           jq -r '.[] | select(.metadata.container.tags[] | test("^[0-9]+\\.[0-9]+\\.[0-9]+$")) | .id' | tail -n +4)

          for VERSION_ID in $VERSION_IDS; do
            echo "Deleting old version ID: $VERSION_ID"
            curl -Ls -X DELETE -H "Accept: application/vnd.github+json" \
                           -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                           -H "X-GitHub-Api-Version: 2022-11-28" \
                           https://api.github.com/user/packages/container/$REPO_NAME/versions/$VERSION_ID
          done
